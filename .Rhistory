names(units2)
units2<-units$analysisResults
names(units2) <- tolower(names(units2))
units<-Achilles::fetchAchillesAnalysisResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,analysisId = 1807)
units2<-units$analysisResults
names(units2) <- tolower(names(units2))
names(units2)
#names(units2)
#take those that have both defined
str(units2)
units2$measurement_concept_id <-as.integer(units2$measurement_concept_id)
#names(units2)
#take those that have both defined
str(units2)
units2$unit_concept_id <-as.integer(units2$unit_concept_id)
units
selected<-units %>% filter(unit_concept_id !=0)
nrow(selected)
selected<-units %>% filter(unit_concept_id !=0)
selected<-units %>% dplyr::filter(unit_concept_id !=0)
selected<-units2 %>% dplyr::filter(unit_concept_id !=0)
nrow(selected)
writeLines("count of suitable measurements for analysis:",nrow(selected))
writeLines(paste("count of suitable measurements for analysis:",nrow(selected)))
library(DataQuality)
library(DataQuality)
library(Eunomia)
#DQD section
#testing it on Eunomia
library(DataQuality)
library(Eunomia)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-DataQuality::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
#DQD section
#testing it on Eunomia
library(DataQuality)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
#DQD section-----------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------
#uncomment the line below to install the latest version of the code and package
#devtools::install_github("vojtechhuser/DataQuality")
#testing it on Eunomia
library(DataQuality)
#replace with your local parameters using the same variable names
#note: it will run some achilles measures (so it may overwrite your current achilles results table)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
#testing on other database
source('~/secret/conn.R')
cdmDatabaseSchema='gpc'
#cdmDatabaseSchema='onek'
vocabularyDatabaseSchema='vocab'
resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#cohortTable='deletecohort'
cohortTable='cohort'
connectionDetails<-createConnectionDetails(dbms='postgresql',user=user,password=pw,server=server
,schema = cdmDatabaseSchema)
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
.createConnectionDetails2<-function (cdmDatabaseSchema,resultsDatabaseSchema=NULL
,oracleTempSchema=NULL
,cdmVersion="5"
,cohortTable='cohort'
,workFolder='c:/temp') {
result <- list()
for (name in names(formals(.createConnectionDetails2))) {
result[[name]] <- get(name)
}
values <- lapply(as.list(match.call())[-1], function(x) eval(x,
envir = sys.frame(-3)))
for (name in names(values)) {
if (name %in% names(result))
result[[name]] <- values[[name]]
}
class(result) <- "connectionDetails2"
return(result)
}
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
workFolder <- 'c:/temp'
#get connection details
source('c:/r/conn.R')  #
#database parameters
cdmDatabaseSchema <-'ccae'
resultsDatabaseSchema <-'ccae' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp'   #this folder must exist (use forward slashes)
#DQD section-----------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------
#uncomment the line below to install the latest version of the code and package
#devtools::install_github("vojtechhuser/DataQuality")
#testing it on Eunomia
library(DataQuality)
#replace with your local parameters using the same variable names
#note: it will run some achilles measures (so it may overwrite your current achilles results table)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
#testing on other database
#load your environment
cdmDatabaseSchema='gpc'
#cdmDatabaseSchema='onek'
vocabularyDatabaseSchema='vocab'
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#cohortTable='deletecohort'
cohortTable='cohort'
#DatabaseConnector::disconnect(connection)
connection <-connect(connectionDetails)
(tables<-getTableNames(connection,cdmDatabaseSchema))
#cohortTable='deletecohort'
cohortTable='cohort'
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
.fetchAchillesAnalysisResults2<-function(connectionDetails, resultsDatabaseSchema, AnalysesAsSqlInCode){
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
on.exit(DatabaseConnector::disconnect(connection = connection))
sql <- "select * from @resultsDatabaseSchema.achilles_results@dist where analysis_id in (@analysisId);"
sql <- SqlRender::render(sql = sql, resultsDatabaseSchema = resultsDatabaseSchema,analysisId = AnalysesAsSqlInCode)
sql <- SqlRender::translate(sql = sql, targetDialect = connectionDetails$dbms)
analysisResults <- DatabaseConnector::querySql(connection = connection,sql = sql)
return(analysisResults)
}
#more numbers
a<-.fetchAchillesAnalysisResults2(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
.fetchAchillesAnalysisDistResults<-function(connectionDetails, resultsDatabaseSchema, AnalysesAsSqlInCode){
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
on.exit(DatabaseConnector::disconnect(connection = connection))
sql <- "select * from @resultsDatabaseSchema.achilles_results_dist where analysis_id in (@analysisId);"
sql <- SqlRender::render(sql = sql, resultsDatabaseSchema = resultsDatabaseSchema,analysisId = AnalysesAsSqlInCode)
sql <- SqlRender::translate(sql = sql, targetDialect = connectionDetails$dbms)
analysisResults <- DatabaseConnector::querySql(connection = connection,sql = sql)
return(analysisResults)
}
#more numbers
a<-.fetchAchillesAnalysisResults2(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
.fetchAchillesAnalysisDistResults<-function(connectionDetails, resultsDatabaseSchema, AnalysesAsSqlInCode){
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
on.exit(DatabaseConnector::disconnect(connection = connection))
sql <- "select * from @resultsDatabaseSchema.achilles_results_dist where analysis_id in (@analysisId);"
sql <- SqlRender::render(sql = sql, resultsDatabaseSchema = resultsDatabaseSchema,analysisId = AnalysesAsSqlInCode)
sql <- SqlRender::translate(sql = sql, targetDialect = connectionDetails$dbms)
analysisResults <- DatabaseConnector::querySql(connection = connection,sql = sql)
return(analysisResults)
}
#more numbers
a<-.fetchAchillesAnalysisDistResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
Achilles::achilles(connectionDetails = connectionDetails
,cdmDatabaseSchema = connectionDetails2$cdmDatabaseSchema
,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,cdmVersion = connectionDetails2$cdmVersion
,analysisIds = c(1807,1815,1816,1817)
,runHeel = FALSE
,createIndices = FALSE
,verboseMode = FALSE)
units<-Achilles::fetchAchillesAnalysisResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,analysisId = 1807)
#more numbers
a<-.fetchAchillesAnalysisDistResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
a
cat(sql)
sql <- "select * from @resultsDatabaseSchema.achilles_results_dist where analysis_id in ( @analysisId );"
cat(sql)
.fetchAchillesAnalysisDistResults<-function(connectionDetails, resultsDatabaseSchema, AnalysesAsSqlInCode){
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
on.exit(DatabaseConnector::disconnect(connection = connection))
sql <- "select * from @resultsDatabaseSchema.achilles_results_dist where analysis_id in ( @analysisId );"
sql <- SqlRender::render(sql = sql, resultsDatabaseSchema = resultsDatabaseSchema,analysisId = AnalysesAsSqlInCode)
sql <- SqlRender::translate(sql = sql, targetDialect = connectionDetails$dbms)
cat(sql)
analysisResults <- DatabaseConnector::querySql(connection = connection,sql = sql)
return(analysisResults)
}
#more numbers
a<-.fetchAchillesAnalysisDistResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
Achilles::achilles(connectionDetails = connectionDetails
,cdmDatabaseSchema = connectionDetails2$cdmDatabaseSchema
,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,cdmVersion = connectionDetails2$cdmVersion
,analysisIds = c(1807,1815,1816,1817)
,runHeel = FALSE
,createIndices = FALSE
,verboseMode = TRUE)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
source('~/GitHub/DataQuality/R/StudySpecific.R', echo=TRUE)
source('~/secret/conn.R')
#testing on other database
#load your environment
cdmDatabaseSchema='gpc'
#cdmDatabaseSchema='onek'
vocabularyDatabaseSchema='vocab'
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#cohortTable='deletecohort'
cohortTable='cohort'
library(DatabaseConnector)
connectionDetails<-createConnectionDetails(dbms='postgresql',user=user,password=pw,server=server
,schema = cdmDatabaseSchema)
#DatabaseConnector::disconnect(connection)
connection <-connect(connectionDetails)
(tables<-getTableNames(connection,cdmDatabaseSchema))
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
#testing on other database
#load your environment
cdmDatabaseSchema='gpc'
#cdmDatabaseSchema='onek'
vocabularyDatabaseSchema='vocab'
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#cohortTable='deletecohort'
cohortTable='cohort'
source('MoreOhdsiRTools.R')
connectionDetails<-createConnectionDetails(dbms='postgresql',user=user,password=pw,server=server
,schema = cdmDatabaseSchema)
#DatabaseConnector::disconnect(connection)
connection <-connect(connectionDetails)
(tables<-getTableNames(connection,cdmDatabaseSchema))
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
#more numbers
a<-.fetchAchillesAnalysisDistResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
#                  ,AnalysesAsSqlInCode = "1815,1816,1817")
,AnalysesAsSqlInCode = "1815")
source('~/GitHub/DataQuality/R/StudySpecific.R', echo=TRUE)
#(tables<-getTableNames(connection,cdmDatabaseSchema))
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails,connectionDetails2 = connectionDetails2)
#(tables<-getTableNames(connection,cdmDatabaseSchema))
dashboardLabThresholds(connectionDetails = connectionDetails,connectionDetails2 = connectionDetails2)
#load athena dictionary
library(tidyverse);library(magrittr);options(tibble.print_max = 200)
load('o:/athena/concept.rda')
#reading a single site data (for now)
sfiles<-c('c:/temp/dqd/export/1ThresholdsA.csv')
ll<-map(sfiles,read_csv)
ll[1]
ll2<-map2(ll,sfiles,~mutate(.x,site=.y))
d<-bind_rows(ll2)
View(d)
#add terminology concepts
sconcept<-concept %>% select(concept_id,concept_name)
d
names(d) <- tolower(names(d))
names(d)
d %>% left_join(sconcept,by=c('stratum_1'='concept_id'))
d2<-d %>% left_join(sconcept,by=c('stratum_1'='concept_id'))
View(d2)
d2<-d %>% left_join(sconcept,by=c('stratum_1'='concept_id')) %>%
left_join(sconcept,by=c('stratum_2'='concept_id'))
View(d2)
d2<-d %>% filter(stratum_2 != 0) %>% left_join(sconcept,by=c('stratum_1'='concept_id')) %>%
left_join(sconcept,by=c('stratum_2'='concept_id'))
View(d2)
names(d2)
d3<-d2 %>% select(-4:6)
d3<-d2 %>% select(-4,-5,-6)
d3<-d2 %>% select(-4,-5,-6,-8,-9,-p25_value,-p75_value)
View(d3)
names(d2)
d3<-d2 %>% select(-stratum_3,-stratum_4,-stratum_5,-p25_value,-p75_value)
d3 %>% write_csv('extras/DqdResults/thresholds-list-A.csv')
View(d3)
#remove columns that are not needed
d3<-d2 %>% select(-stratum_3,-stratum_4,-stratum_5,-p25_value,-p75_value) %>% filter(count_value >=100 )
View(d3)
#remove columns that are not needed
d3<-d2 %>% select(-stratum_3,-stratum_4,-stratum_5,-p25_value,-p75_value) %>%
filter(count_value >=100 ) %>% arrange(stratum_1,desc(count_value) )
View(d3)
#even more removal of data
d4<-d3 %>% select(-count_value,-median_value,-stdev_value)
View(d4)
#even more removal of data
d4<-d3 %>% select(-count_value,-median_value,-stdev_value,-avg_value)
View(d4)
d4 %>% write_csv('extras/DqdResults/thresholds-list-A.csv')
#even more removal of data
d4<-d3 %>% select(-count_value,-median_value,-stdev_value,-avg_value,-site)
d4 %>% write_csv('extras/DqdResults/thresholds-list-A.csv')
nrow(d4)
#read DD checks
url='https://raw.githubusercontent.com/OHDSI/DataQualityDashboard/master/inst/csv/OMOP_CDMv5.3.1_Concept_Level.csv'
dqd<-read_csv(url)
#read DD checks
library(tidyverse)
#read DD checks
library(stats);library(tidyverse);library(magrittr)
message("\n*** Successfully loaded .Rprofile ***\n")
url='https://raw.githubusercontent.com/OHDSI/DataQualityDashboard/master/inst/csv/OMOP_CDMv5.3.1_Concept_Level.csv'
dqd<-read_csv(url)
str(dqd)
View(dqd)
View(dqd)
str(dqd)
names(dqd)
dqd %>% filter(cdmTableName=='MEASUREMENT')
names(dqd)
dqd %>% filter(cdmTableName=='MEASUREMENT' & cmdFieldName=='MEASUREMENT_CONCEPT_ID' )
names(dqd)
dqd %>% filter(cdmTableName=='MEASUREMENT' & cmdFieldName=='MEASUREMENT_CONCEPT_ID' )
dqd %>% filter(cdmTableName=='MEASUREMENT' && cmdFieldName=='MEASUREMENT_CONCEPT_ID' )
names(dqd)
dqd %>% filter(cdmTableName=='MEASUREMENT' & cmdFieldName=='MEASUREMENT_CONCEPT_ID' )
dqd %>% dplyr::filter(cdmTableName=='MEASUREMENT' & cmdFieldName=='MEASUREMENT_CONCEPT_ID' )
dqd %>% dplyr::filter(cdmFieldName=='MEASUREMENT_CONCEPT_ID' )
dqd %>% dplyr::filter(cdmFieldName=='MEASUREMENT_CONCEPT_ID' ) %>% nrow()
dqd %>% count(cdmTableName)
dqd %>% count(cdmTableName,cdmFieldName)
#reading a single site data (for now)
f<-'d:/OneDrive - National Institutes of Health/temp/dqd/export/'
sfiles<-c(file.path(f,'1ThresholdsA.csv'))
ll<-map(sfiles,read_csv)
#reading a single site data (for now)
f<-'d:/OneDrive - National Institutes of Health/temp/dqd/export'
sfiles<-c(file.path(f,'1ThresholdsA.csv'))
ll<-map(sfiles,read_csv)
sfiles<-c(file.path(f,'1ThresholdsA.csv'))
ll<-map(sfiles,read_csv)
ll
sfiles<-c(file.path(f,'1ThresholdsA.csv'),file.path(f,'ThresholdsA.csv'))
ll<-map(sfiles,read_csv)
ll
#ll<-map(p$pid,doProperty())
ll2<-map2(ll,sfiles,~mutate(.x,site=.y))
d<-bind_rows(ll2)
#compare data driven and expert drive sets
d
#compare data driven and expert drive sets
d$STRATUM_1 %<>% as.integer()
dqd$unitConceptId
dqd$unitConceptId %<>% as.integer()
expert <-dqd %>% dplyr::filter(cdmFieldName=='MEASUREMENT_CONCEPT_ID' )
expert
names(expert)
ddriven<-d %>% rename(unitConceptId=STRATUM_2)
exprt %>% inner_join(ddriven)
expert %>% inner_join(ddriven)
names(expert)
ddriven<-d %>% rename(conceptId=STRATUM_1,unitConceptId=STRATUM_2)
ddriven<-d %>% rename(conceptId=STRATUM_1,unitConceptId=STRATUM_2)  %>% select(conceptId,unitConceptId) %>% distint()
expert %>% inner_join(ddriven)
expert %>% anti_join(ddriven)
expert %>% inner_join(ddriven)
over=expert %>% inner_join(ddriven) #58 overlapping
View(over)
over=expert %>% inner_join(ddriven) #58 overlapping
ddriven<-d %>% rename(conceptId=STRATUM_1,unitConceptId=STRATUM_2)  %>% select(conceptId,unitConceptId) %>% unique()
over=expert %>% inner_join(ddriven) #58 overlapping
View(over)
sfiles<-c(file.path(f,'1ThresholdsA.csv'))
ll<-map(sfiles,read_csv)
ll
#ll<-map(p$pid,doProperty())
ll2<-map2(ll,sfiles,~mutate(.x,site=.y))
d<-bind_rows(ll2)
#compare data driven and expert drive sets
d$STRATUM_1 %<>% as.integer()
dqd$unitConceptId %<>% as.integer()
expert <-dqd %>% dplyr::filter(cdmFieldName=='MEASUREMENT_CONCEPT_ID' )
names(expert)
ddriven<-d %>% rename(conceptId=STRATUM_1,unitConceptId=STRATUM_2)
over=expert %>% inner_join(ddriven) #58 overlapping
View(over)
ddriven %>% anti_join(expert) #827 not in data
not1<-ddriven %>% anti_join(expert) #49 not in expert
View(not1)
#remove no units rows and expand the CIDs
d2<-d %>% filter(stratum_1 != 0) %>% filter(stratum_2 != 0) %>% left_join(sconcept,by=c('stratum_1'='concept_id')) %>%
left_join(sconcept,by=c('stratum_2'='concept_id'))
d<-bind_rows(ll2)
#add terminology concepts
sconcept<-concept %>% select(concept_id,concept_name)
load('o:/athena/concept.rda')
#add terminology concepts
sconcept<-concept %>% select(concept_id,concept_name)
names(d) <- tolower(names(d))
names(d)
#remove no units rows and expand the CIDs
d2<-d %>% filter(stratum_1 != 0) %>% filter(stratum_2 != 0) %>% left_join(sconcept,by=c('stratum_1'='concept_id')) %>%
left_join(sconcept,by=c('stratum_2'='concept_id'))
names(d2)
names(d2)
ddriven %<>% filter(conceptId!=0)
ddriven %<>% filter(unitConceptId!=0)
ddriven<-d %>% rename(conceptId=STRATUM_1,unitConceptId=STRATUM_2)
sfiles<-c(file.path(f,'1ThresholdsA.csv'))
ll<-map(sfiles,read_csv)
ll
#ll<-map(p$pid,doProperty())
ll2<-map2(ll,sfiles,~mutate(.x,site=.y))
d<-bind_rows(ll2)
names(d) <- tolower(names(d))
#remove no units rows and expand the CIDs
d2<-d %>% filter(stratum_1 != 0) %>% filter(stratum_2 != 0) %>% left_join(sconcept,by=c('stratum_1'='concept_id')) %>%
left_join(sconcept,by=c('stratum_2'='concept_id'))
names(d2)
ddriven<-d2 %>% rename(conceptId=stratum_1,unitConceptId=stratum_2)
not1<-ddriven %>% anti_join(expert) #49 not in expert
View(not1)
over=expert %>% inner_join(ddriven) #58 overlapping
View(over)
#compare the trehsholds
names(over)
over %>% select(conceptName,plausibleValueLow,min_value)
over %>% select(conceptName,plausibleValueHigh,max_value)
over %>% select(conceptName,unitConceptName,plausibleValueLow,min_value)
over %>% select(conceptName,unitConceptName,plausibleValueLow,min_value)
over %>% select(conceptName,unitConceptName,plausibleValueHigh,max_value)
over %>% select(conceptName,unitConceptName,plausibleValueHigh,max_value) %>% kable()
over %>% select(conceptName,unitConceptName,plausibleValueHigh,max_value) %>% knittr::kable()
over %>% select(conceptName,unitConceptName,plausibleValueHigh,max_value) %>% knitr::kable()
View(expert)
View(over)
View(over)
