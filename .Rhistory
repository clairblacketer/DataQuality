remove.packages(xml2)
devtools::install_github("r-lib/pkgdown")
devtools::install_github("r-lib/pkgdown")
devtools::install_github("r-lib/pkgdown")
pkgdown::build_site()
pkgdown::build_site()
library(DataQuality)
use_package('OhdsiSharing')
devtools::use_package('OhdsiSharing')
#tbd
library(devtools)
use_package('OhdsiSharing')
pkgdown::build_site()
pkgdown::build_site()
library(DataQuality)
library(Eunomia)
ConnectionDetails<-Eunomia::getEunomiaConnectionDetails()
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp'   #this folder must exist (use forward slashes)
executeDQ(connectionDetails = connectionDetails
,cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder)
library(DataQuality)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp'   #this folder must exist (use forward slashes)
executeDQ(connectionDetails = connectionDetails
,cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder)
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
library(DataQuality)
library(DataQuality)
.createConnectionDetails2<-function (cdmDatabaseSchema)
{
result <- list()
for (name in names(formals(createConnectionDetails))) {
result[[name]] <- get(name)
}
values <- lapply(as.list(match.call())[-1], function(x) eval(x,
envir = sys.frame(-3)))
for (name in names(values)) {
if (name %in% names(result))
result[[name]] <- values[[name]]
}
class(result) <- "connectionDetails2"
return(result)
}
#' more details
#' @export
.createConnectionDetails2<-function (cdmDatabaseSchema) {
result <- list()
for (name in names(formals(createConnectionDetails))) {
result[[name]] <- get(name)
}
values <- lapply(as.list(match.call())[-1], function(x) eval(x,
envir = sys.frame(-3)))
for (name in names(values)) {
if (name %in% names(result))
result[[name]] <- values[[name]]
}
class(result) <- "connectionDetails2"
return(result)
}
cd2<-.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema)
#' more details
#' @export
.createConnectionDetails2<-function (cdmDatabaseSchema) {
result <- list()
for (name in names(formals(createConnectionDetails2))) {
result[[name]] <- get(name)
}
values <- lapply(as.list(match.call())[-1], function(x) eval(x,
envir = sys.frame(-3)))
for (name in names(values)) {
if (name %in% names(result))
result[[name]] <- values[[name]]
}
class(result) <- "connectionDetails2"
return(result)
}
cd2<-.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema)
#' more details
#' @export
.createConnectionDetails2<-function (cdmDatabaseSchema) {
result <- list()
for (name in names(formals(.createConnectionDetails2))) {
result[[name]] <- get(name)
}
values <- lapply(as.list(match.call())[-1], function(x) eval(x,
envir = sys.frame(-3)))
for (name in names(values)) {
if (name %in% names(result))
result[[name]] <- values[[name]]
}
class(result) <- "connectionDetails2"
return(result)
}
cd2<-.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema)
cd2
#' more details
#' @export
.createConnectionDetails2<-function (cdmDatabaseSchema,resultsDatabaseSchema=NULL,cdmVersion=NULL,cohortTable='cohort') {
result <- list()
for (name in names(formals(.createConnectionDetails2))) {
result[[name]] <- get(name)
}
values <- lapply(as.list(match.call())[-1], function(x) eval(x,
envir = sys.frame(-3)))
for (name in names(values)) {
if (name %in% names(result))
result[[name]] <- values[[name]]
}
class(result) <- "connectionDetails2"
return(result)
}
connectionDetails2<-.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema,resultsDatabaseSchema = resultsDatabaseSchema)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
connectionDetails2<-.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema,resultsDatabaseSchema = resultsDatabaseSchema)
#' more details
#' @export
.createConnectionDetails2<-function (cdmDatabaseSchema,resultsDatabaseSchema=NULL,cdmVersion=NULL
,cohortTable='cohort'
,workFolder='c:/temp') {
result <- list()
for (name in names(formals(.createConnectionDetails2))) {
result[[name]] <- get(name)
}
values <- lapply(as.list(match.call())[-1], function(x) eval(x,
envir = sys.frame(-3)))
for (name in names(values)) {
if (name %in% names(result))
result[[name]] <- values[[name]]
}
class(result) <- "connectionDetails2"
return(result)
}
library(DataQuality)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
Achilles::achilles(connectionDetails = connectionDetails
,cdmDatabaseSchema = connectionDetails2$cdmDatabaseSchema
,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,analysisIds = c(1807))
Achilles::achilles(connectionDetails = connectionDetails
,cdmDatabaseSchema = connectionDetails2$cdmDatabaseSchema
,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,analysisIds = c(1807)
,runHeel = FALSE
,createIndices = FALSE)
units<-Achilles::fetchAchillesAnalysisResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,analysisId = 1807)
units
#tbd
library(devtools)
devtools::use_package('dplyr')
#tbd
library(devtools)
devtools::use_package('dplyr')
use_package('dplyr')
names(units)
names(units)
units
,analysisId = 1807)$analysisResults
,analysisId = 1807)$analysisResults
units<-units$analysisResults
names(units)
units2<-units$analysisResults
units2<-units$analysisResults
names(units2)
names(units2) <- tolower(names(units2))
units2<-units$analysisResults
names(units2) <- tolower(names(units2))
names(units2)
units2<-units$analysisResults
names(units2) <- tolower(names(units2))
units<-Achilles::fetchAchillesAnalysisResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,analysisId = 1807)
units2<-units$analysisResults
names(units2) <- tolower(names(units2))
names(units2)
#names(units2)
#take those that have both defined
str(units2)
units2$measurement_concept_id <-as.integer(units2$measurement_concept_id)
#names(units2)
#take those that have both defined
str(units2)
units2$unit_concept_id <-as.integer(units2$unit_concept_id)
units
selected<-units %>% filter(unit_concept_id !=0)
nrow(selected)
selected<-units %>% filter(unit_concept_id !=0)
selected<-units %>% dplyr::filter(unit_concept_id !=0)
selected<-units2 %>% dplyr::filter(unit_concept_id !=0)
nrow(selected)
writeLines("count of suitable measurements for analysis:",nrow(selected))
writeLines(paste("count of suitable measurements for analysis:",nrow(selected)))
library(DataQuality)
library(DataQuality)
library(Eunomia)
#DQD section
#testing it on Eunomia
library(DataQuality)
library(Eunomia)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-DataQuality::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
#DQD section
#testing it on Eunomia
library(DataQuality)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
#DQD section-----------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------
#uncomment the line below to install the latest version of the code and package
#devtools::install_github("vojtechhuser/DataQuality")
#testing it on Eunomia
library(DataQuality)
#replace with your local parameters using the same variable names
#note: it will run some achilles measures (so it may overwrite your current achilles results table)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
#testing on other database
source('~/secret/conn.R')
cdmDatabaseSchema='gpc'
#cdmDatabaseSchema='onek'
vocabularyDatabaseSchema='vocab'
resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#cohortTable='deletecohort'
cohortTable='cohort'
connectionDetails<-createConnectionDetails(dbms='postgresql',user=user,password=pw,server=server
,schema = cdmDatabaseSchema)
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
.createConnectionDetails2<-function (cdmDatabaseSchema,resultsDatabaseSchema=NULL
,oracleTempSchema=NULL
,cdmVersion="5"
,cohortTable='cohort'
,workFolder='c:/temp') {
result <- list()
for (name in names(formals(.createConnectionDetails2))) {
result[[name]] <- get(name)
}
values <- lapply(as.list(match.call())[-1], function(x) eval(x,
envir = sys.frame(-3)))
for (name in names(values)) {
if (name %in% names(result))
result[[name]] <- values[[name]]
}
class(result) <- "connectionDetails2"
return(result)
}
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
workFolder <- 'c:/temp'
#get connection details
source('c:/r/conn.R')  #
#database parameters
cdmDatabaseSchema <-'ccae'
resultsDatabaseSchema <-'ccae' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp'   #this folder must exist (use forward slashes)
#DQD section-----------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------
#uncomment the line below to install the latest version of the code and package
#devtools::install_github("vojtechhuser/DataQuality")
#testing it on Eunomia
library(DataQuality)
#replace with your local parameters using the same variable names
#note: it will run some achilles measures (so it may overwrite your current achilles results table)
library(Eunomia)
connectionDetails<-Eunomia::getEunomiaConnectionDetails()
cdmDatabaseSchema <-'main'
resultsDatabaseSchema <-'main' #at most sites this likely will not be the same as cdmDatabaseSchema
workFolder <- 'c:/temp/dqd'   #this folder must exist (use forward slashes)
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
#testing on other database
#load your environment
cdmDatabaseSchema='gpc'
#cdmDatabaseSchema='onek'
vocabularyDatabaseSchema='vocab'
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#cohortTable='deletecohort'
cohortTable='cohort'
#DatabaseConnector::disconnect(connection)
connection <-connect(connectionDetails)
(tables<-getTableNames(connection,cdmDatabaseSchema))
#cohortTable='deletecohort'
cohortTable='cohort'
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
.fetchAchillesAnalysisResults2<-function(connectionDetails, resultsDatabaseSchema, AnalysesAsSqlInCode){
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
on.exit(DatabaseConnector::disconnect(connection = connection))
sql <- "select * from @resultsDatabaseSchema.achilles_results@dist where analysis_id in (@analysisId);"
sql <- SqlRender::render(sql = sql, resultsDatabaseSchema = resultsDatabaseSchema,analysisId = AnalysesAsSqlInCode)
sql <- SqlRender::translate(sql = sql, targetDialect = connectionDetails$dbms)
analysisResults <- DatabaseConnector::querySql(connection = connection,sql = sql)
return(analysisResults)
}
#more numbers
a<-.fetchAchillesAnalysisResults2(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
.fetchAchillesAnalysisDistResults<-function(connectionDetails, resultsDatabaseSchema, AnalysesAsSqlInCode){
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
on.exit(DatabaseConnector::disconnect(connection = connection))
sql <- "select * from @resultsDatabaseSchema.achilles_results_dist where analysis_id in (@analysisId);"
sql <- SqlRender::render(sql = sql, resultsDatabaseSchema = resultsDatabaseSchema,analysisId = AnalysesAsSqlInCode)
sql <- SqlRender::translate(sql = sql, targetDialect = connectionDetails$dbms)
analysisResults <- DatabaseConnector::querySql(connection = connection,sql = sql)
return(analysisResults)
}
#more numbers
a<-.fetchAchillesAnalysisResults2(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
.fetchAchillesAnalysisDistResults<-function(connectionDetails, resultsDatabaseSchema, AnalysesAsSqlInCode){
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
on.exit(DatabaseConnector::disconnect(connection = connection))
sql <- "select * from @resultsDatabaseSchema.achilles_results_dist where analysis_id in (@analysisId);"
sql <- SqlRender::render(sql = sql, resultsDatabaseSchema = resultsDatabaseSchema,analysisId = AnalysesAsSqlInCode)
sql <- SqlRender::translate(sql = sql, targetDialect = connectionDetails$dbms)
analysisResults <- DatabaseConnector::querySql(connection = connection,sql = sql)
return(analysisResults)
}
#more numbers
a<-.fetchAchillesAnalysisDistResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
Achilles::achilles(connectionDetails = connectionDetails
,cdmDatabaseSchema = connectionDetails2$cdmDatabaseSchema
,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,cdmVersion = connectionDetails2$cdmVersion
,analysisIds = c(1807,1815,1816,1817)
,runHeel = FALSE
,createIndices = FALSE
,verboseMode = FALSE)
units<-Achilles::fetchAchillesAnalysisResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,analysisId = 1807)
#more numbers
a<-.fetchAchillesAnalysisDistResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
a
cat(sql)
sql <- "select * from @resultsDatabaseSchema.achilles_results_dist where analysis_id in ( @analysisId );"
cat(sql)
.fetchAchillesAnalysisDistResults<-function(connectionDetails, resultsDatabaseSchema, AnalysesAsSqlInCode){
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
on.exit(DatabaseConnector::disconnect(connection = connection))
sql <- "select * from @resultsDatabaseSchema.achilles_results_dist where analysis_id in ( @analysisId );"
sql <- SqlRender::render(sql = sql, resultsDatabaseSchema = resultsDatabaseSchema,analysisId = AnalysesAsSqlInCode)
sql <- SqlRender::translate(sql = sql, targetDialect = connectionDetails$dbms)
cat(sql)
analysisResults <- DatabaseConnector::querySql(connection = connection,sql = sql)
return(analysisResults)
}
#more numbers
a<-.fetchAchillesAnalysisDistResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,AnalysesAsSqlInCode = "1815,1816,1817")
Achilles::achilles(connectionDetails = connectionDetails
,cdmDatabaseSchema = connectionDetails2$cdmDatabaseSchema
,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
,cdmVersion = connectionDetails2$cdmVersion
,analysisIds = c(1807,1815,1816,1817)
,runHeel = FALSE
,createIndices = FALSE
,verboseMode = TRUE)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
source('~/GitHub/DataQuality/R/StudySpecific.R', echo=TRUE)
source('~/secret/conn.R')
#testing on other database
#load your environment
cdmDatabaseSchema='gpc'
#cdmDatabaseSchema='onek'
vocabularyDatabaseSchema='vocab'
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#cohortTable='deletecohort'
cohortTable='cohort'
library(DatabaseConnector)
connectionDetails<-createConnectionDetails(dbms='postgresql',user=user,password=pw,server=server
,schema = cdmDatabaseSchema)
#DatabaseConnector::disconnect(connection)
connection <-connect(connectionDetails)
(tables<-getTableNames(connection,cdmDatabaseSchema))
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
library(DataQuality)
#testing on other database
#load your environment
cdmDatabaseSchema='gpc'
#cdmDatabaseSchema='onek'
vocabularyDatabaseSchema='vocab'
resultsDatabaseSchema=resultDatabaseSchema=cohortDatabaseSchema='gpc_results'
#cohortTable='deletecohort'
cohortTable='cohort'
source('MoreOhdsiRTools.R')
connectionDetails<-createConnectionDetails(dbms='postgresql',user=user,password=pw,server=server
,schema = cdmDatabaseSchema)
#DatabaseConnector::disconnect(connection)
connection <-connect(connectionDetails)
(tables<-getTableNames(connection,cdmDatabaseSchema))
#just a helper construct to package all study details into one object (similar as done with database details)
connectionDetails2<-DataQuality:::.createConnectionDetails2(cdmDatabaseSchema = cdmDatabaseSchema
,resultsDatabaseSchema = resultsDatabaseSchema
,workFolder = workFolder
)
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails
,connectionDetails2 = connectionDetails2)
#more numbers
a<-.fetchAchillesAnalysisDistResults(connectionDetails = connectionDetails,resultsDatabaseSchema = connectionDetails2$resultsDatabaseSchema
#                  ,AnalysesAsSqlInCode = "1815,1816,1817")
,AnalysesAsSqlInCode = "1815")
source('~/GitHub/DataQuality/R/StudySpecific.R', echo=TRUE)
#(tables<-getTableNames(connection,cdmDatabaseSchema))
DataQuality::dashboardLabThresholds(connectionDetails = connectionDetails,connectionDetails2 = connectionDetails2)
#(tables<-getTableNames(connection,cdmDatabaseSchema))
dashboardLabThresholds(connectionDetails = connectionDetails,connectionDetails2 = connectionDetails2)
